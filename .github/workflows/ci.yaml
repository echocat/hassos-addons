name: Continuous Integration

env:
  REGISTRY: ghcr.io
  TEST_IMAGE_LABEL_NAME: "test image"
  IMAGE_SUFFIX: "duplicati"

  GITHUB_TOKEN: ${{ github.token }}
  GITHUB_OWNER_TYPE: ${{github.event.repository.owner.type == 'User' && 'user' || 'org'}}

on:
  push:
    branches:
      - main

  pull_request:
    types:
      - opened
      - reopened
      - synchronize

  release:
    types:
      - released

concurrency:
  cancel-in-progress: true
  group: ${{ github.workflow }}-${{github.ref}}

jobs:
  resolve:
    runs-on: ubuntu-latest
    name: "Resolve"
    outputs:
      registry: "${{ steps.refs.outputs.registry }}"
      image: "${{ steps.refs.outputs.image }}"
      imageTag: "${{ steps.refs.outputs.imageTag }}"
      push: "${{ steps.refs.outputs.push }}"
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version-file: .build/go.mod
          check-latest: true
          cache-dependency-path: |
            .build/go.sum

      - name: Execute
        id: refs
        working-directory: .build
        run: |
          set -e
          function hasLabel() {
            go run . has-pr-label "${1}" "${TEST_IMAGE_LABEL_NAME}" && return 0 || retVal=$?
            if [ "$retVal" -eq 1 ]; then
              return 1
            fi
            exit $retVal
          }
          
          registry="${{ env.REGISTRY }}"
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            imageTag="pr-${{ github.event.number }}"
          else
            imageTag="$(echo "${{ github.ref_name }}" | sed -E "s/^v([0-9]+(\.[0-9]+)*)(-.+)?$/\1/")"
          fi
          image="${registry}/${{ github.repository }}/${{ env.IMAGE_SUFFIX }}"

          if [ "${{ github.event_name }}" == "release" ]; then
            push="true"
          elif [ "${{ github.event_name }}" == "pull_request" ] && hasLabel "${{ github.event.number }}"; then
            push="true"
          else
            push="false"
          fi

          echo "registry=${registry}" >> "$GITHUB_OUTPUT"
          echo "image=${image}" >> "$GITHUB_OUTPUT"
          echo "imageTag=${imageTag}" >> "$GITHUB_OUTPUT"
          echo "push=${push}" >> "$GITHUB_OUTPUT"

          echo "## Task information" >> "$GITHUB_STEP_SUMMARY"
          echo "| Name | Value |" >> "$GITHUB_STEP_SUMMARY"
          echo "| - | - |" >> "$GITHUB_STEP_SUMMARY"
          echo "| Image | \`${image}\` |" >> "$GITHUB_STEP_SUMMARY"
          echo "| Should push | \`${push}\` |" >> "$GITHUB_STEP_SUMMARY"

  build:
    runs-on: ubuntu-latest
    name: Build ${{ matrix.platform }}
    needs:
      - resolve
    strategy:
      matrix:
        platform:
          - linux/amd64
          - linux/arm64
    permissions:
      pull-requests: read
      contents: read
      packages: write

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Prepare
        id: refs
        working-directory: .build
        run: |
          set -e
          platform="${{ matrix.platform }}"
          echo "platformPair=${platform//\//-}" >> "$GITHUB_OUTPUT"        

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: "${{ steps.refs.outputs.image }}"
          tags: |
            type=sha
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: "${{ needs.resolve.outputs.registry }}"
          username: "${{ github.actor }}"
          password: "${{ secrets.GITHUB_TOKEN }}"

      - name: Build image
        id: build
        uses: docker/build-push-action@v6
        with:
          context: "./${{ env.IMAGE_SUFFIX }}"
          platforms: "${{ matrix.platform }}"
          labels: "${{ steps.meta.outputs.labels }}"
          outputs: "type=image,name=${{ needs.resolve.outputs.image }},push-by-digest=${{ needs.resolve.outputs.push }},name-canonical=true,push=${{ needs.resolve.outputs.push }}"

      - name: Export image digest
        if: needs.resolve.outputs.push == 'true'
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"

      - name: Upload image digest
        if: needs.resolve.outputs.push == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ steps.refs.outputs.platformPair }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  merge:
    name: "Merge"
    runs-on: ubuntu-latest
    needs:
      - resolve
      - build
    if: needs.resolve.outputs.push == 'true'
    steps:
      - name: Download image digests
        uses: actions/download-artifact@v4
        with:
          path: /tmp/digests
          pattern: digests-*
          merge-multiple: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ needs.resolve.outputs.image }}
          tags: |
            type=sha
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: "${{ needs.resolve.outputs.registry }}"
          username: "${{ github.actor }}"
          password: "${{ secrets.GITHUB_TOKEN }}"

      - name: Create manifest list and push
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ needs.resolve.outputs.image }}@sha256:%s ' *)          

      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ needs.resolve.outputs.image }}:${{ steps.meta.outputs.version }}    

  announce:
    name: Announce changes
    runs-on: ubuntu-latest
    permissions:
      contents: write
    needs:
      - resolve
      - build
      - merge
    if: ${{ github.event_name == 'release' }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Update files
        run: |
          set -ex
          ref=$(echo "${{ github.ref_name }}" | sed -E "s/^v([0-9]+(\.[0-9]+)*)(-.+)?$/\1/")
          sed -i -E "s/^(version: ).+$/\1${ref}/" "unifi/config.yaml"
          git add "unifi/config.yaml"
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git commit -m "Release announcement of ${ref}"

      - name: Push changes
        uses: ad-m/github-push-action@master
        with:
          branch: ${{ github.head_ref }}
